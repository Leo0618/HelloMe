apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_7
def COMPILE_SDK_VERION = 24
def BUILDTOOLS_VERION = "24.0.0"
def MIN_SDK_VERSION = 16
def TARGET_SDK_VERSION = 24
def VERSION_CODE = 1
def VERSION_NAME = "1.0"

def tagTime() {
    return new Date().format("yyyyMMddss", TimeZone.getTimeZone("UTC"))
}

def myTinkerId() {
    return "patch-${tagTime()}"
}

android {
    compileSdkVersion COMPILE_SDK_VERION
    buildToolsVersion BUILDTOOLS_VERION

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        applicationId "com.leo618.hellome"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode VERSION_CODE
        versionName VERSION_NAME

        multiDexEnabled true

        multiDexKeepProguard file("keep_in_main_dex.txt")
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/leo.keystore")
                keyAlias 'leo'
                keyPassword 'LEO~1234'
                storePassword 'LEO~123'
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            try {
                storeFile file("./keystore/leo.keystore")
                keyAlias 'leo'
                keyPassword 'LEO~1234'
                storePassword 'LEO~123'
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.0.0'
    compile "com.android.support:multidex:1.0.1"
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okio:okio:1.8.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.alibaba:fastjson:1.2.7'
    compile 'com.jakewharton:butterknife:7.0.1'

    compile('com.tencent.tinker:tinker-android-anno:1.7.3')
    compile('com.tencent.tinker:tinker-android-lib:1.7.3')
}


def bakPath = file("${buildDir}/apkPatchDir/")

def fileNameComm = "app-debug-1115-10-00-13"

ext {
    tinkerEnabled = true
    tinkerOldApkPath = "${bakPath}/${fileNameComm}.apk"
    tinkerApplyMappingPath = "${bakPath}/${fileNameComm}.txt"
    tinkerApplyResourcePath = "${bakPath}/${fileNameComm}-R.txt"
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : "${myTinkerId()}"
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        oldApk = getOldApkPath()
        ignoreWarning = false
        useSign = true

        buildConfig {
            applyMapping = getApplyMappingPath()
            applyResourceMapping = getApplyResourceMappingPath()
            tinkerId = getTinkerIdValue()
        }

        dex {
            dexMode = "jar"
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]
            loader = ["com.tencent.tinker.loader.*",
                      "com.leo618.hellome.libcore.MyAppLike"
            ]
        }

        lib {
            pattern = ["lib/arm64-v8a/*.so",
                       "lib/armeabi/*.so",
                       "lib/armeabi-v7a/*.so",
                       "lib/mips/*.so",
                       "lib/mips64/*.so",
                       "lib/x86/*.so",
                       "lib/x86_64/*.so"]
        }

        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = []
            largeModSize = 100
        }

        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")

        }

        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }
    }

    android.applicationVariants.all { variant ->
        def taskName = variant.name
        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                it.doLast {
                    copy {
                        def date = new Date().format("MMdd-HH-mm-ss")
                        from "${buildDir}/outputs/apk/${project.getName()}-${taskName}.apk"
                        into bakPath
                        rename { String fileName ->
                            fileName.replace("${project.getName()}-${taskName}.apk", "${project.getName()}-${taskName}-${date}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                        into bakPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${project.getName()}-${taskName}-${date}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                        into bakPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${project.getName()}-${taskName}-${date}-R.txt")
                        }
                    }
                }
            }
        }
    }
}
